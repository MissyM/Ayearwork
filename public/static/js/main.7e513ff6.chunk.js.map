{"version":3,"sources":["logo.svg","App.js","pages/Video.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","states","name","url","component","Video","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentVideo","id","title","list","_this2","fetch","then","r","json","res","setState","video","_this3","react_default","a","createElement","src","controls","autoPlay","map","key","onClick","setVideo","Component","plugins","hashLocationPlugin","App","lib_esm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wLCOlCC,eAAS,CACb,CACEC,KAAM,QACNC,IAAK,GACLC,sBCPF,SAAAC,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,aAAc,CACZC,GAAI,GACJC,MAAO,IAETC,KAAM,IAPIX,mFAWM,IAAAY,EAAAT,KAClBU,MAAM,mCACHC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZF,KAAK,SAAAG,GACJL,EAAKM,SAAS,CACZP,KAAMM,uCAKLE,GACPhB,KAAKe,SAAS,CACZV,aAAcW,qCAIT,IAAAC,EAAAjB,KACP,OAAOkB,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,UAAKpB,KAAKI,MAAMC,aAAaE,OAC7BW,EAAAC,EAAAC,cAAA,SACEd,GAAG,cACHe,IAAK,mCAAqCrB,KAAKI,MAAMC,aAAaC,GAClEgB,UAAQ,EAACC,UAAQ,IAEnBL,EAAAC,EAAAC,cAAA,UAEIpB,KAAKI,MAAMI,KAAKgB,IACd,SAAAR,GAAK,OAAIE,EAAAC,EAAAC,cAAA,MAAIK,IAAKT,EAAMV,GAAIoB,QAAS,kBAAMT,EAAKU,SAASX,KACtDA,EAAMT,kBAzCDqB,gBDadC,EAAU,CAACC,KAYFC,mLARX,OACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAUH,QAASA,EAASrC,OAAQA,GAClC0B,EAAAC,EAAAC,cAACY,EAAA,EAAD,cAJUJ,aELEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.7e513ff6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { UIRouter, UIView, hashLocationPlugin } from '@uirouter/react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport Video from './pages/Video.jsx'\r\n\r\nconst states = [\r\n  {\r\n    name: 'video',\r\n    url: '',\r\n    component: Video,\r\n  },\r\n];\r\n\r\nconst plugins = [hashLocationPlugin];\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <UIRouter plugins={plugins} states={states}>\r\n        <UIView />\r\n      </UIRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\nclass Video extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      currentVideo: {\r\n        id: '',\r\n        title: '',\r\n      },\r\n      list: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('http://localhost:8080/api/video')\r\n      .then(r => r.json())\r\n      .then(res => {\r\n        this.setState({\r\n          list: res,\r\n        })\r\n      })\r\n  }\r\n\r\n  setVideo(video) {\r\n    this.setState({\r\n      currentVideo: video\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return <div>\r\n      <h1>{this.state.currentVideo.title}</h1>\r\n      <video\r\n        id=\"videoPlayer\"\r\n        src={\"http://localhost:8080/api/video/\" + this.state.currentVideo.id}\r\n        controls autoPlay>\r\n      </video>\r\n      <ul>\r\n        {\r\n          this.state.list.map(\r\n            video => <li key={video.id} onClick={() => this.setVideo(video)}>\r\n              {video.title}\r\n            </li>\r\n          )\r\n        }\r\n      </ul>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Video\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}